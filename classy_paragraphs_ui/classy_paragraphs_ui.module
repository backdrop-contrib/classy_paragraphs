<?php

/**
 * @file
 * classy_paragraphs_ui.module
 */

/**
 * Implements hook_permission().
 */
function classy_paragraphs_ui_permission() {
  return array(
    'administer classy paragraphs ui' => array(
      'title' => t('Administer Classy Paragraphs'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function classy_paragraphs_ui_menu() {
  $items['admin/config/content/classy-paragraphs-ui/class/%/edit'] = array(
    'title' => 'Edit class',
    'description' => 'Configuration for Classy Paragraphs',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('classy_paragraphs_ui_edit_class', 5),
    'access arguments' => array('administer classy paragraphs ui'),
  );

  $items['admin/config/content/classy-paragraphs-ui/class/add'] = array(
    'title' => 'Add new class',
    'description' => 'Configuration for Classy Paragraphs',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('classy_paragraphs_ui_add_class'),
    'access arguments' => array('administer classy paragraphs ui'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/content/classy-paragraphs-ui/class/%/delete'] = array(
    'title' => 'Delete class',
    'description' => 'Configuration for Classy Paragraphs',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('classy_paragraphs_ui_delete_class', 5),
    'access arguments' => array('administer classy paragraphs ui'),
  );
  $items['admin/config/content/classy-paragraphs-ui/set/%/edit'] = array(
    'title' => 'Edit set',
    'description' => 'Configuration for Classy Paragraphs',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('classy_paragraphs_ui_edit_set', 5),
    'access arguments' => array('administer classy paragraphs ui'),
  );
  $items['admin/config/content/classy-paragraphs-ui/set/add'] = array(
    'title' => 'Add new set',
    'description' => 'Configuration for Classy Paragraphs',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('classy_paragraphs_ui_add_set'),
    'access arguments' => array('administer classy paragraphs ui'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/content/classy-paragraphs-ui/set/%/delete'] = array(
    'title' => 'Delete set',
    'description' => 'Configuration for Classy Paragraphs',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('classy_paragraphs_ui_delete_set', 5),
    'access arguments' => array('administer classy paragraphs ui'),
  );
  $items['admin/config/content/classy-paragraphs-ui'] = array(
    'title' => 'Classy Paragraphs',
    'description' => 'Configuration for Classy Paragraphs',
    'page callback' => 'classy_paragraphs_ui_list',
    'access arguments' => array('administer classy paragraphs ui'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
  * Implements hook_config_info().
  */
function classy_paragraphs_ui_config_info() {
  $prefixes['classy_paragraphs_ui.classes'] = array(
    'label' => t('Classy Paragraphs classes'),
    'group' => t('Paragraphs'),
  );
  $prefixes['classy_paragraphs_ui.sets'] = array(
    'label' => t('Classy Paragraphs sets'),
    'group' => t('Paragraphs'),
  );
  return $prefixes;
}

/**
 * Edit class form.
 */
function classy_paragraphs_ui_edit_class($form, &$form_state, $the_id) {
  $form = array();

  $op = 'edit';
  $form = classy_paragraphs_ui_add_edit_form($form, $form_state, $the_id, $op);

  return $form;
}

/**
 * Add class form.
 */
function classy_paragraphs_ui_add_class($form, &$form_state) {
  $form = array();

  $the_id = '';

  $op = 'add';
  $form = classy_paragraphs_ui_add_edit_form($form, $form_state, $the_id, $op);

  return $form;
}

/**
 * Edit set form.
 */
function classy_paragraphs_ui_edit_set($form, &$form_state, $the_id) {
  $form = array();

  $op = 'edit-set';
  $form = classy_paragraphs_ui_add_edit_form($form, $form_state, $the_id, $op);

  return $form;
}

/**
 * Add set form.
 */
function classy_paragraphs_ui_add_set($form, &$form_state) {
  $form = array();

  $the_id = '';

  $op = 'add-set';
  $form = classy_paragraphs_ui_add_edit_form($form, $form_state, $the_id, $op);

  return $form;
}

/**
 * Delete class form.
 */
function classy_paragraphs_ui_delete_class($form, &$form_state, $the_id) {

  $form = array();
  $form['#action'] = '?destination=admin/config/content/classy-paragraphs-ui';
  $form['the_id'] = array(
    '#type' => 'value',
    '#value' => $the_id,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to delete this class?'),
    'admin/config/content/classy-paragraphs-ui',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );

  return $form;
}

/**
 * Submit handler for deleting a class.
 */
function classy_paragraphs_ui_delete_class_submit($form, &$form_state) {
  $config = config('classy_paragraphs_ui.classes');
  $the_id = $form_state['values']['the_id'];

  $config->clear($the_id);
  $config->save();

  backdrop_set_message(t('The @class class has been deleted.', array('@class' => $form_state['values']['the_id'])));
  $form_state['redirect'] = 'admin/config/content/classy-paragraphs-ui';
}

/**
 * Submit handler for editing a class.
 */
function classy_paragraphs_ui_edit_class_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $the_id = $form_state['values']['the_id'];

  $config = config('classy_paragraphs_ui.classes');
  if ($the_id != $form_state['values']['name']) {
    // The class name was changed, so we should delete the old entry.
    $config->clear($the_id);
  }
  if (!empty($form_state['values']['sets'])) {
    $sets = $form_state['values']['sets'];
  }
  else {
    $sets = array();
  }
  $class = array(
    'name' => $form_state['values']['name'],
    'label' => $form_state['values']['label'],
    'sets' => $sets,
  );
  $config->set($form_state['values']['name'], $class);
  $config->save();
}

/**
 * Submit handler for add a class.
 */
function classy_paragraphs_ui_add_class_submit($form, &$form_state) {
  $config = config('classy_paragraphs_ui.classes');
  form_state_values_clean($form_state);

  if (!empty($form_state['values']['sets'])) {
    $sets = $form_state['values']['sets'];
  }
  else {
    $sets = array();
  }
  $new_class = array(
    'name' => $form_state['values']['name'],
    'label' => $form_state['values']['label'],
    'sets' => $sets,
  );
  $config->set($form_state['values']['name'], $new_class);
  $config->save();
}

/**
 * Delete set form.
 */
function classy_paragraphs_ui_delete_set($form, &$form_state, $the_id) {

  $form = array();
  $form['#action'] = '?destination=admin/config/content/classy-paragraphs-ui';
  $form['the_id'] = array(
    '#type' => 'value',
    '#value' => $the_id,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to delete this set?'),
    'admin/config/content/classy-paragraphs-ui',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );

  return $form;
}

/**
 * Submit handler for deleting a set.
 */
function classy_paragraphs_ui_delete_set_submit($form, &$form_state) {
  $config = config('classy_paragraphs_ui.sets');
  $old_set_name = $form_state['values']['the_id'];

  $config->clear($old_set_name);
  // Check if the set is used on any classes; if so we should delete the entry.
  $classes_array = config_get('classy_paragraphs_ui.classes');
  $classes_config = config('classy_paragraphs_ui.classes');
  $class_change_needed = 0;
  foreach ($classes_array as $class) {
    foreach ($class['sets'] as $set) {
      if ($set && strval($set) == $old_set_name) {
        unset($class['sets'][$old_set_name]);
        $classes_config->set($class['name'], $class);
        $class_change_needed = 1;
      }
    }
  }
  if ($class_change_needed) {
    $classes_config->save();
  }
  $config->save();

  backdrop_set_message(t('The @set set has been deleted.', array('@set' => $form_state['values']['the_id'])));
  $form_state['redirect'] = 'admin/config/content/classy-paragraphs-ui';
}

/**
 * Submit handler for editing a set.
 */
function classy_paragraphs_ui_edit_set_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $old_set_name = $form_state['values']['the_id'];
  $new_set_name = $form_state['values']['name'];

  $config = config('classy_paragraphs_ui.sets');
  if ($old_set_name != $new_set_name) {
    // The set name was changed, so we should delete the old entry.
    $config->clear($old_set_name);
    $classes_array = config_get('classy_paragraphs_ui.classes');
    $classes_config = config('classy_paragraphs_ui.classes');
    $class_change_needed = 0;
    foreach ($classes_array as $class) {
      foreach ($class['sets'] as $set) {
        if ($set && strval($set) == $old_set_name) {
          unset($class['sets'][$old_set_name]);
          $class['sets'][$new_set_name] = $new_set_name;
          $classes_config->set($class['name'], $class);
          $class_change_needed = 1;
        }
      }
    }
    if ($class_change_needed) {
      $classes_config->save();
    }
  }
  $set = array(
    'name' => $new_set_name,
    'label' => $form_state['values']['label'],
  );
  $config->set($new_set_name, $set);
  $config->save();
}

/**
 * Submit handler for add a set.
 */
function classy_paragraphs_ui_add_set_submit($form, &$form_state) {
  $config = config('classy_paragraphs_ui.sets');
  form_state_values_clean($form_state);

  $new_set = array(
    'name' => $form_state['values']['name'],
    'label' => $form_state['values']['label'],
  );
  $config->set($form_state['values']['name'], $new_set);
  $config->save();
}

/**
 * List the available classes and sets.
 */
function classy_paragraphs_ui_list() {
  $output = '';
  $classes_array = config_get('classy_paragraphs_ui.classes');
  $sets_array = config_get('classy_paragraphs_ui.sets');

  if (!empty($classes_array)) {
    $header = array('Class', 'Sets', 'Operations');
    $rows = array();
    foreach ($classes_array as $key => $value) {
      $links = array(
        'edit' => array(
          'title' => t('Edit'),
          'href' => '/admin/config/content/classy-paragraphs-ui/class/' . $key . '/edit',
        ),
        'delete' => array(
          'title' => t('Delete'),
          'href' => '/admin/config/content/classy-paragraphs-ui/class/' . $key . '/delete',
        ),
      );
      $class_sets = array();
      foreach ($value['sets'] as $set) {
        if ($set) {
          $class_sets[$set] = $sets_array[$set]['label'];
        }
      }
      $rows[] = array(
        $value['label'] . ' <em>(' . $value['name'] . ')</em>',
        implode(', ', $class_sets),
        array(
          'data' => array(
            '#type' => 'operations',
            '#links' => $links,
          ),
        ),
      );
    }
    $output .= '<h2>' . t('Classes') . '</h2>';
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }

  if (!empty($sets_array)) {
    $header = array('Set', 'Operations');
    $rows = array();
    foreach ($sets_array as $key => $value) {
      $links = array(
        'edit' => array(
          'title' => t('Edit'),
          'href' => '/admin/config/content/classy-paragraphs-ui/set/' . $key . '/edit',
        ),
        'delete' => array(
          'title' => t('Delete'),
          'href' => '/admin/config/content/classy-paragraphs-ui/set/' . $key . '/delete',
        ),
      );
      $rows[] = array(
        $value['label'] . ' <em>(' . $value['name'] . ')</em>',
        array(
          'data' => array(
            '#type' => 'operations',
            '#links' => $links,
          ),
        ),
      );
    }
    $output .= '<h2>' . t('Sets') . '</h2>';
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }

  return $output;
}

/**
 * Generate a form for adding or editing classes and sets.
 */
function classy_paragraphs_ui_add_edit_form($form, &$form_state, $the_id, $op) {
  $classes_array = config_get('classy_paragraphs_ui.classes');
  $sets_array = config_get('classy_paragraphs_ui.sets');
  $form = array();

  // Set up form
  if ($op == 'edit' || $op == 'add') {
    // Add or edit class form.
    if ($op == 'edit') {
      $default_value = $classes_array[$the_id];
      $form['the_id'] = array(
        '#type' => 'value',
        '#value' => $the_id,
      );
    }
    else {
      $default_value = array(
        'name' => '',
        'label' => '',
        'sets' => array(),
      );
    }
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Class'),
      '#default_value' => $default_value['name'],
      '#size' => 16,
      '#maxlength' => 30,
      '#description' => t("The class name you wish to use, which will be added to paragraphs. It should contain only the characters [a-z0-9], hyphens (-) and underscores (_); it cannot start with a digit."),
      '#required' => TRUE,
    );
    $form['label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label'),
      '#default_value' => $default_value['label'],
      '#size' => 16,
      '#maxlength' => 30,
      '#description' => t("The label, used for administrative screens only."),
      '#required' => TRUE,
    );
    if (!empty($sets_array)) {
      $set_options = array();
      foreach ($sets_array as $set) {
        $set_options[$set['name']] = $set['label'];
      }
      $form['sets'] = array(
        '#type' => 'checkboxes',
        '#options' => $set_options,
        '#title' => t('Which sets should this class be added to?'),
        '#default_value' => $default_value['sets'],
      );
    }
  }
  else {
    // Add or edit set form.
    if ($op == 'edit-set') {
      $default_value = $sets_array[$the_id];
      $form['the_id'] = array(
        '#type' => 'value',
        '#value' => $the_id,
      );
    }
    else {
      $default_value = array(
        'name' => '',
        'label' => '',
      );
    }
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Set id'),
      '#default_value' => $default_value['name'],
      '#size' => 16,
      '#maxlength' => 30,
      '#description' => t("The ID or machine name you wish to use for this set. It should contain only the characters [a-z0-9], hyphens (-) and underscores (_); it cannot start with a digit."),
      '#required' => TRUE,
    );
    $form['label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label'),
      '#default_value' => $default_value['label'],
      '#size' => 16,
      '#maxlength' => 30,
      '#description' => t("The label, used for administrative screens only."),
      '#required' => TRUE,
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['#action'] = '?destination=admin/config/content/classy-paragraphs-ui';
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function classy_paragraphs_ui_classy_paragraphs_list_options_alter(&$options, $field = NULL, $instance = array()) {
  if (!empty($instance['settings']['classy_paragraphs_set'])) {
    $set = $instance['settings']['classy_paragraphs_set'];
  }
  else {
    $set = NULL;
  }

  $classes_array = config_get('classy_paragraphs_ui.classes');

  foreach ($classes_array as $key => $value) {
    if (!$set || (is_array($value['sets']) && !empty($value['sets'][$set]))) {
      $options[$value['name']] = t($value['label']);
    }
  }
}

function classy_paragraphs_ui_field_widget_info_alter(&$info) {
  // Add a setting to a widget type.
  foreach ($info as $key => $widget) {
    if (!empty($widget['field types']) && in_array(CLASSY_PARAGRAPHS_FIELD_TYPE_LIST, $widget['field types'])) {
      $info[$key]['settings'] += array(
        'classy_paragraphs_set' => '',
      );
    }
  }
}
